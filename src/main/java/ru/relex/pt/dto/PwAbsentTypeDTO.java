package ru.relex.pt.dto;

// Generated 11.02.2009 16:09:29 by Hibernate Tools 3.2.0.beta7

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;


/**
 * PwAbsentType generated by hbm2java
 */
@Entity
@Cache(usage = CacheConcurrencyStrategy.TRANSACTIONAL)
@Table(name = "PW_ABSENT_TYPE", uniqueConstraints = {})
public class PwAbsentTypeDTO extends IdableDTO implements Serializable
{

    // Fields

    private BigDecimal absentTypeId;

    private String name;

    private Set<PwAbsentsDTO> pwAbsentses = new HashSet<PwAbsentsDTO>(0);

    // Constructors

    /** default constructor */
    public PwAbsentTypeDTO()
    {
    }

    /** minimal constructor */
    public PwAbsentTypeDTO(BigDecimal absentTypeId, String name)
    {
        this.absentTypeId = absentTypeId;
        this.name = name;
    }

    /** full constructor */
    public PwAbsentTypeDTO(BigDecimal absentTypeId, String name,
        Set<PwAbsentsDTO> pwAbsentses)
    {
        this.absentTypeId = absentTypeId;
        this.name = name;
        this.pwAbsentses = pwAbsentses;
    }

    // Property accessors
    @Id
    @Column(name = "ABSENT_TYPE_ID", unique = true, nullable = false, insertable = true, updatable = true, precision = 22, scale = 0)
    public BigDecimal getAbsentTypeId()
    {
        return this.absentTypeId;
    }

    public void setAbsentTypeId(BigDecimal absentTypeId)
    {
        this.absentTypeId = absentTypeId;
    }

    @Column(name = "NAME", unique = false, nullable = false, insertable = true, updatable = true, length = 64)
    public String getName()
    {
        return this.name;
    }

    public void setName(String name)
    {
        this.name = name;
    }

    @OneToMany(cascade = {CascadeType.REMOVE}, fetch = FetchType.LAZY, mappedBy = "pwAbsentType")
    public Set<PwAbsentsDTO> getPwAbsentses()
    {
        return this.pwAbsentses;
    }

    public void setPwAbsentses(Set<PwAbsentsDTO> pwAbsentses)
    {
        this.pwAbsentses = pwAbsentses;
    }
    
    /**
     * Данный метод необходим для поддержки реализации интерфейса {@link Idable}.
     */
    @Transient
    @Override
    public BigDecimal getId()
    {
        return getAbsentTypeId();
    }

}
